{"ast":null,"code":"import { EventEmitter } from 'events';\nimport Dispatcher from '../appDispatcher';\nimport actionTypes from '../actions/actionTypesCount';\nconst CHANGE_EVENT = \"change\";\nlet _counts = 0;\nclass _countStore extends EventEmitter {\n  addChangeListener(callback) {\n    this.on(CHANGE_EVENT, callback);\n  }\n  removeChangeListener(callback) {\n    this.removeListener(CHANGE_EVENT, callback);\n  }\n  emitChange() {\n    this.emit(CHANGE_EVENT);\n  }\n  getCounts() {\n    return _counts;\n  }\n}\nconst store = new _countStore();\nDispatcher.register(action => {\n  switch (action.actionType) {\n    case actionTypes.MORE_COUNT:\n      _counts = _counts + 1;\n      // debugger;\n      store.emitChange();\n      break;\n    case actionTypes.LESS_COUNT:\n      _counts = _counts - 1;\n      store.emitChange();\n      break;\n    default:\n      break;\n  }\n});\nexport default store;","map":{"version":3,"names":["EventEmitter","Dispatcher","actionTypes","CHANGE_EVENT","_counts","_countStore","addChangeListener","callback","on","removeChangeListener","removeListener","emitChange","emit","getCounts","store","register","action","actionType","MORE_COUNT","LESS_COUNT"],"sources":["E:/Documentos/UTrabajo------------/DilbaniHelps/proyecto1_base_consumo_api_hipotetica/flux_base_MasGlobal/src/stores/countStores.js"],"sourcesContent":["import {EventEmitter} from 'events';\r\nimport Dispatcher  from '../appDispatcher';\r\nimport actionTypes from '../actions/actionTypesCount';\r\n\r\n\r\nconst CHANGE_EVENT = \"change\";\r\nlet _counts = 0 ;\r\n\r\n\r\nclass _countStore extends EventEmitter {\r\n\r\n    addChangeListener(callback){\r\n        this.on(CHANGE_EVENT, callback)\r\n    }\r\n    removeChangeListener(callback){\r\n        this.removeListener(CHANGE_EVENT, callback)\r\n    }\r\n    emitChange(){\r\n        this.emit(CHANGE_EVENT)\r\n    }\r\n    getCounts(){\r\n        return _counts;\r\n    }\r\n \r\n}\r\n\r\n\r\nconst store = new _countStore();\r\n\r\nDispatcher.register(action =>{\r\n    switch(action.actionType){\r\n\r\n        case actionTypes.MORE_COUNT:\r\n            _counts = _counts + 1\r\n            // debugger;\r\n            store.emitChange();\r\n            break;\r\n\r\n        case actionTypes.LESS_COUNT:\r\n            _counts = _counts - 1\r\n            store.emitChange();\r\n            break;\r\n\r\n        default:\r\n            break;\r\n\r\n    }   \r\n})\r\n\r\nexport default store;"],"mappings":"AAAA,SAAQA,YAAY,QAAO,QAAQ;AACnC,OAAOC,UAAU,MAAO,kBAAkB;AAC1C,OAAOC,WAAW,MAAM,6BAA6B;AAGrD,MAAMC,YAAY,GAAG,QAAQ;AAC7B,IAAIC,OAAO,GAAG,CAAC;AAGf,MAAMC,WAAW,SAASL,YAAY,CAAC;EAEnCM,iBAAiBA,CAACC,QAAQ,EAAC;IACvB,IAAI,CAACC,EAAE,CAACL,YAAY,EAAEI,QAAQ,CAAC;EACnC;EACAE,oBAAoBA,CAACF,QAAQ,EAAC;IAC1B,IAAI,CAACG,cAAc,CAACP,YAAY,EAAEI,QAAQ,CAAC;EAC/C;EACAI,UAAUA,CAAA,EAAE;IACR,IAAI,CAACC,IAAI,CAACT,YAAY,CAAC;EAC3B;EACAU,SAASA,CAAA,EAAE;IACP,OAAOT,OAAO;EAClB;AAEJ;AAGA,MAAMU,KAAK,GAAG,IAAIT,WAAW,CAAC,CAAC;AAE/BJ,UAAU,CAACc,QAAQ,CAACC,MAAM,IAAG;EACzB,QAAOA,MAAM,CAACC,UAAU;IAEpB,KAAKf,WAAW,CAACgB,UAAU;MACvBd,OAAO,GAAGA,OAAO,GAAG,CAAC;MACrB;MACAU,KAAK,CAACH,UAAU,CAAC,CAAC;MAClB;IAEJ,KAAKT,WAAW,CAACiB,UAAU;MACvBf,OAAO,GAAGA,OAAO,GAAG,CAAC;MACrBU,KAAK,CAACH,UAAU,CAAC,CAAC;MAClB;IAEJ;MACI;EAER;AACJ,CAAC,CAAC;AAEF,eAAeG,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}